class Solution {
    public int searchInsert(int[] nums, int target) {
       
        if(nums[nums.length-1]<target)
            return nums.length;
          if(nums[0]>=target)
            return 0;
        int left = 0;
        int right = nums.length;
        
        while(left<right)
        {
            int mid = (left+right)/2;
            
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]<target && target<=nums[mid+1])
                return mid+1;
            else if(nums[mid]>target && target>nums[mid-1])
                return mid;
            if(nums[mid]<target)
                left =mid+1;
            if(nums[mid]>target)
                right=mid;
        }
        
        return 0;
    }
}



Output:



Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
Example 4:
Input: nums = [1,3,5,6], target = 0
Output: 0
Example 5:
Input: nums = [1], target = 0
Output: 0
